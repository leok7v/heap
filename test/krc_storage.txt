/* The following is reference implementation of malloc() and free() 
   from the book "The C Programming Language" 1978
   by Brian W. Kernighan and Dennis M. Ritchie
   ISBN-13: 007-6092003106  ISBN-10: 0131103628  Edition: 2nd
   chapter "8.7 Example - A Storage Allocator" p.~149-152 */

/* DO NOT BUILD - for reference purpose only */

struct header {
    struct header *ptr;
    size_t size;
};

typedef struct header Header;

static Header base;          /* empty list to get started */
static Header *freep = NULL; /* start of free list */

#define NALLOC 1024 * 1024

void free(void *ap);

static Header *morecore(size_t nu) {
    char *cp;
    Header *up;
    if (nu < NALLOC) {
        nu = NALLOC;
    }
    cp = ...; /* sbrk */
    if (cp == NULL || cp == (void*)-1) {
        return NULL;
    }
    up = (Header *) cp;
    up->size = nu;
    free(up + 1);
    return freep;
}

void* malloc(size_t nbytes) {
    Header *p, *prevp;
    size_t nunits;
    nunits = (nbytes + sizeof(Header) - 1) / sizeof(Header) + 1;
    if ((prevp = freep) == NULL) { /* no free list yet */
        base.ptr = freep = prevp = &base;
        base.size = 0;
    }
    for (p = prevp->ptr; ; prevp = p, p = p->ptr) {
        if (p->size >= nunits) { /* big enough */
            if (p->size == nunits) { /* exactly */
                prevp->ptr = p->ptr;
            } else { /* allocate tail end */
                p->size -= nunits;
                p += p->size;
                p->size = nunits;
            }
            freep = prevp;
            return p + 1;
        }
        if (p == freep) { /* wrapped around free list */
            if ((p = morecore(nunits)) == NULL) {
                return NULL; /* none left */
            }
        }
    }
}

void free(void *ap) {
    Header *bp, *p;
    bp = (Header *)ap - 1; /* point to block header */
    for (p = freep; !(bp > p && bp < p->ptr); p = p->ptr) {
        if (p >= p->ptr && (bp > p || bp < p->ptr)) {
            break; /* freed block at start or end of arena */
        }
    }
    if (bp + bp->size == p->ptr) { /* join to upper neighbor */
        bp->size += p->ptr->size;
        bp->ptr = p->ptr->ptr;
    } else {
        bp->ptr = p->ptr;
    }
    if (p + p->size == bp) { /* join to lower neighbor */
        p->size += bp->size;
        p->ptr = bp->ptr;
    } else {
        p->ptr = bp;
    }
    freep = p;
}

